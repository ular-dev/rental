const axios = require("axios");
const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∫–∞–Ω–∞–ª
const TELEGRAM_TOKEN = "7606358097:AAGfxzYb0h-FYcCPcTfRJPhR0LMrHOeAvC8";
const CHANNEL_USERNAME = "@rental_bishkek";

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });

// –§–∞–π–ª—ã
const FILE_PATH = "./sent_apartments.json";

// –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ ID –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
let sentApartmentIds = new Set();

function loadSentIds() {
  if (fs.existsSync(FILE_PATH)) {
    const savedData = JSON.parse(fs.readFileSync(FILE_PATH));
    sentApartmentIds = new Set(savedData);
  }
}

function saveSentIds() {
  fs.writeFileSync(FILE_PATH, JSON.stringify([...sentApartmentIds]));
}

// –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
const queue = [];
let isSending = false;

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
let apartmentsSentToday = 0;

// –§—É–Ω–∫—Ü–∏—è –ø–∞—É–∑—ã
function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// –ü—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏
async function processQueue() {
  if (isSending) return;
  isSending = true;

  while (queue.length > 0) {
    const { type, data } = queue.shift();

    try {
      if (type === "photo") {
        const sent = await bot.sendPhoto(CHANNEL_USERNAME, data.photo, {
          caption: data.caption,
          parse_mode: "HTML",
        });
      } else if (type === "text") {
        const sent = await bot.sendMessage(CHANNEL_USERNAME, data.caption, {
          parse_mode: "HTML",
        });
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error.message);
    }

    await sleep(60000); // –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  }

  isSending = false;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä
async function fetchAndSendApartments() {
  try {
    const response = await axios.get(
      "https://lalafo.kg/api/search/v3/feed/search",
      {
        headers: {
          "User-Agent": "Mozilla/5.0",
          device: "pc",
        },
        params: {
          expand: "url", // –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º
          "per-page": 50, // 20 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
          page: 1, // –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
          category_id: 2044, // –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä
          city_id: 103184, // –ë–∏—à–∫–µ–∫
        },
      }
    );

    const apartments = response.data.items;
    for (const item of apartments) {
      if (!sentApartmentIds.has(item.id)) {
        sentApartmentIds.add(item.id);
        saveSentIds();

        const title = item.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
        const link = `https://lalafo.kg${item.url}`;
        const district = item.params[0]?.value || "–ù–µ —É–∫–∞–∑–∞–Ω";
        const postedAt = new Date(item.created_time * 1000).toLocaleString(
          "ru-RU"
        );
        const phone = item.mobile || "–ù–µ —É–∫–∞–∑–∞–Ω"
        const price = item.price || "–ù–µ —É–∫–∞–∑–∞–Ω"
          ? `${item.price} ${item.currency}`
          : "–¶–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è";

        // –§–æ—Ç–æ
        const photoUrl =
          item.images?.[0]?.original_url || item.images?.[0]?.thumbnail_url;

        // –°–æ–±–∏—Ä–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
        const caption = `
  <a href="${link}"><b>${title}</b></a>
  
  üìç –†–∞–π–æ–Ω: <b>#${district.replace(/\s/g, "")}</b>
  üíµ –¶–µ–Ω–∞: <b>${price}</b>
  üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>${phone}</b>

  üóì ${postedAt}
          `.trim();

        // –ö–Ω–æ–ø–∫–∞ "–ö –æ–±—ä—è–≤–ª–µ–Ω–∏—é"
        const inlineKeyboard = {
          reply_markup: {
            inline_keyboard: [[{ text: "‚û°Ô∏è –ö –æ–±—ä—è–≤–ª–µ–Ω–∏—é", url: link }]],
          },
          parse_mode: "HTML",
        };

        if (photoUrl) {
          queue.push({
            type: "photo",
            data: {
              photo: photoUrl,
              caption,
              itemId: item.id,
              options: inlineKeyboard,
            },
          });
        } else {
          queue.push({
            type: "text",
            data: { caption, itemId: item.id, options: inlineKeyboard },
          });
        }
      }
    }

    processQueue();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", error.message);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç—ã –Ω–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
setInterval(fetchAndSendApartments, 5 * 60 * 1000);

// –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
loadSentIds();
fetchAndSendApartments();
