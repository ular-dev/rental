const axios = require("axios");
const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_TOKEN = "7606358097:AAGfxzYb0h-FYcCPcTfRJPhR0LMrHOeAvC8";
const CHANNEL_USERNAME = "@rental_bishkek";
const FILE_PATH = "./sent_apartments.json";

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });

// –°–æ—Å—Ç–æ—è–Ω–∏—è
let sentApartmentIds = new Set();
let pendingQueue = []; // —Ç–µ–ø–µ—Ä—å –æ—á–µ—Ä–µ–¥—å –º–∞—Å—Å–∏–≤–æ–º

// ======= –§—É–Ω–∫—Ü–∏–∏ ==========

// –ü–∞—É–∑–∞
function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö ID
function loadSentIds() {
  if (fs.existsSync(FILE_PATH)) {
    const savedData = JSON.parse(fs.readFileSync(FILE_PATH));
    sentApartmentIds = new Set(savedData);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö ID
function saveSentIds() {
  fs.writeFileSync(FILE_PATH, JSON.stringify([...sentApartmentIds]));
}

// –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
async function fetchAndSendApartments() {
    if (pendingQueue.length > 0) {
      console.log("‚è≥ –û—á–µ—Ä–µ–¥—å –µ—â—ë –Ω–µ –ø—É—Å—Ç–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä...");
      return;
    }
  
    try {
      const response = await axios.get(
        "https://lalafo.kg/api/search/v3/feed/search",
        {
          headers: {
            "User-Agent": "Mozilla/5.0",
            device: "pc",
          },
          params: {
            expand: "url",
            "per-page": 50,
            page: 1,
            category_id: 2044,
            city_id: 103184,
            params: "19057",
          },
        }
      );
  
      const apartments = response.data.items;
      for (const item of apartments) {
        if (!sentApartmentIds.has(item.id)) {
          console.log(`üîî –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞: ${item.id}`);
          pendingQueue.push(item.id); // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä:", error.message);
    }
  }
  

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
async function fetchApartmentDetailsAndSend(adId) {
  try {
    const response = await axios.get(
      `https://lalafo.kg/api/search/v3/feed/details/${adId}?expand=url`,
      {
        headers: {
          "User-Agent": "Mozilla/5.0",
          device: "pc",
        },
      }
    );

    const item = response.data;
    console.log(item, 'item');
    const title = item.title?.replace('Long term rental apartments', '–°–¥–∞–µ—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞') || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const link = `https://lalafo.kg${item.url}`;
    const district =
      item.params?.find((p) => p.name === "District")?.value || "–ù–µ —É–∫–∞–∑–∞–Ω";
    const postedAt = new Date(item.created_time * 1000).toLocaleString("ru-RU");
    const phone = item.mobile || "–ù–µ —É–∫–∞–∑–∞–Ω";

    // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const importantParams = extractImportantParams(item.params || []);
    const floor =
      importantParams.floorNumber && importantParams.numberOfFloors
        ? `${importantParams.floorNumber} –∏–∑ ${importantParams.numberOfFloors}`
        : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    const whoOwner =
      importantParams.owner?.toLowerCase() === "owner"
        ? "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫"
        : "–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ";
    const deposit = importantParams.deposit || "–ù–µ —É–∫–∞–∑–∞–Ω";

    const price = item.price
      ? `${item.price} ${item.currency}`
      : "–¶–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è";

    const photoUrl = item.images?.[0]?.original_url || item.images?.[0]?.thumbnail_url;

    // üìã –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
    const caption = `
<a href="${link}"><b>${title}</b></a>

üìç –†–∞–π–æ–Ω: <b>#${district.replace(/\s/g, "")}</b>
üíµ –¶–µ–Ω–∞: <b>${price}</b>
üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>${phone}</b>

üè¢ –≠—Ç–∞–∂: <b>${floor}</b>
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: <b>${whoOwner}</b>
üí∞ –î–µ–ø–æ–∑–∏—Ç: <b>${deposit}</b>

üóì –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>${postedAt}</b>
`.trim();

    const options = {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [[{ text: "‚û°Ô∏è –ö –æ–±—ä—è–≤–ª–µ–Ω–∏—é", url: link }]],
      },
    };

    if (photoUrl) {
      await bot.sendPhoto(CHANNEL_USERNAME, photoUrl, { caption, ...options });
    } else {
      await bot.sendMessage(CHANNEL_USERNAME, caption, options);
    }

    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${adId}`);

    sentApartmentIds.add(adId);
    saveSentIds();
  } catch (error) {
    console.error(
      `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${adId}:`,
      error.message
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 –º–∏–Ω—É—Ç–∞
async function processQueue() {
  if (pendingQueue.length === 0) {
    return;
  }

  const adId = pendingQueue.shift(); // –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
  await fetchApartmentDetailsAndSend(adId);
}

// ======== –°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ ==========

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ ID
loadSentIds();

// –°—Ä–∞–∑—É –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∏—â–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã
fetchAndSendApartments();

// –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
setInterval(fetchAndSendApartments, 5 * 60 * 1000);

// –ö–∞–∂–¥—É—é 1 –º–∏–Ω—É—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 1 –∫–≤–∞—Ä—Ç–∏—Ä—É
setInterval(processQueue, 5 * 60 * 1000);

// –ö–∞–∂–¥—ã–µ 48 —á–∞—Å–æ–≤ –æ—á–∏—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ ID
setInterval(clearSentIds, 48 * 60 * 60 * 1000);

function extractImportantParams(params) {
  const importantFields = {
    "Floor Number": null,
    "Number of Floors": null,
    "KG - Seller Type": null, // –≠—Ç–æ "Owner"
    "Deposit, som": null,
  };

  for (const param of params) {
    if (importantFields.hasOwnProperty(param.name)) {
      importantFields[param.name] = param.value;
    }
  }

  return {
    floorNumber: importantFields["Floor Number"],
    numberOfFloors: importantFields["Number of Floors"],
    owner: importantFields["KG - Seller Type"],
    deposit: importantFields["Deposit, som"],
  };
}

function clearSentIds() {
  sentApartmentIds.clear(); // –æ—á–∏—â–∞–µ–º –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ ID
  saveSentIds(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
  console.log("üßπ –û—á–∏—â–µ–Ω —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä!");
}
