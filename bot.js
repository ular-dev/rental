const axios = require("axios");
const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_TOKEN = "7606358097:AAGfxzYb0h-FYcCPcTfRJPhR0LMrHOeAvC8";
const CHANNEL_USERNAME = "@rental_bishkek";
const FILE_PATH = "./sent_apartments.json";

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });

// –°–æ—Å—Ç–æ—è–Ω–∏—è
let sentApartmentIds = new Set();
let pendingQueue = [];

// ======= –§—É–Ω–∫—Ü–∏–∏ ==========
function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

function loadSentIds() {
  if (fs.existsSync(FILE_PATH)) {
    const savedData = JSON.parse(fs.readFileSync(FILE_PATH));
    sentApartmentIds = new Set(savedData);
  }
}

function saveSentIds() {
  fs.writeFileSync(FILE_PATH, JSON.stringify([...sentApartmentIds]));
}

function isWithinWorkingHours() {
  const hour = new Date().getHours();
  return hour >= 9 && hour < 23;
}

async function fetchAndSendApartments() {
  if (pendingQueue.length > 0) {
    console.log("‚è≥ –û—á–µ—Ä–µ–¥—å –µ—â—ë –Ω–µ –ø—É—Å—Ç–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä...");
    return;
  }

  try {
    const response = await axios.get(
      "https://lalafo.kg/api/search/v3/feed/search",
      {
        headers: { "User-Agent": "Mozilla/5.0", device: "pc" },
        params: {
          expand: "url",
          "per-page": 50,
          page: 1,
          category_id: 2044,
          city_id: 103184,
          params: "19057",
        },
      }
    );

    const apartments = response.data.items;
    for (const item of apartments) {
      if (!sentApartmentIds.has(item.id)) {
        console.log(`üîî –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞: ${item.id}`);
        pendingQueue.push(item.id);
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä:", error.message);
  }
}

async function fetchApartmentDetailsAndSend(adId) {
  try {
    const response = await axios.get(
      `https://lalafo.kg/api/search/v3/feed/details/${adId}?expand=url`,
      {
        headers: { "User-Agent": "Mozilla/5.0", device: "pc" },
      }
    );

    const item = response.data;
    const title = item.title?.replace('Long term rental apartments', '–°–¥–∞–µ—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞') || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const district = item.params?.find((p) => p.name === "District")?.value || "–ù–µ —É–∫–∞–∑–∞–Ω";
    const postedAt = new Date(item.created_time * 1000).toLocaleString("ru-RU");
    const phone = item.mobile || "–ù–µ —É–∫–∞–∑–∞–Ω";
    const importantParams = extractImportantParams(item.params || []);

    const floor = importantParams.floorNumber && importantParams.numberOfFloors
      ? `${importantParams.floorNumber} –∏–∑ ${importantParams.numberOfFloors}`
      : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    const whoOwner = importantParams.owner?.toLowerCase() === "owner" ? "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫" : "–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ";
    const deposit = importantParams.deposit || "–ù–µ —É–∫–∞–∑–∞–Ω";
    const price = item.price ? `${item.price} ${item.currency}` : "–¶–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è";

    const caption = `
<b>${title}</b>

üìç –†–∞–π–æ–Ω: <b>#${district.replace(/\s/g, "")}</b>
üíµ –¶–µ–Ω–∞: <b>${price}</b>
üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>${phone}</b>

üè¢ –≠—Ç–∞–∂: <b>${floor}</b>
üîë –ö–≤–∞—Ä—Ç–∏—Ä–∞ –æ—Ç: <b>${whoOwner}</b>
üí∞ –î–µ–ø–æ–∑–∏—Ç: <b>${deposit}</b>

üóì –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>${postedAt}</b>
`.trim();

    const media = item.images?.slice(0, 10).map((img, index) => ({
      type: "photo",
      media: img.original_url || img.thumbnail_url,
      caption: index === 0 ? caption : undefined,
      parse_mode: index === 0 ? "HTML" : undefined,
    }));

    if (media?.length > 0) {
      await bot.sendMediaGroup(CHANNEL_USERNAME, media);
    } else {
      await bot.sendMessage(CHANNEL_USERNAME, caption, { parse_mode: "HTML" });
    }

    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${adId}`);
    sentApartmentIds.add(adId);
    saveSentIds();
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${adId}:`, error.message);
  }
}

async function processQueue() {
  if (!isWithinWorkingHours()) {
    console.log("üïí –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.");
    return;
  }

  if (pendingQueue.length === 0) return;

  const adId = pendingQueue.shift();
  await fetchApartmentDetailsAndSend(adId);
}

function extractImportantParams(params) {
  const importantFields = {
    "Floor Number": null,
    "Number of Floors": null,
    "KG - Seller Type": null,
    "Deposit, som": null,
  };

  for (const param of params) {
    if (importantFields.hasOwnProperty(param.name)) {
      importantFields[param.name] = param.value;
    }
  }

  return {
    floorNumber: importantFields["Floor Number"],
    numberOfFloors: importantFields["Number of Floors"],
    owner: importantFields["KG - Seller Type"],
    deposit: importantFields["Deposit, som"],
  };
}

function clearSentIds() {
  sentApartmentIds.clear();
  saveSentIds();
  console.log("üßπ –û—á–∏—â–µ–Ω —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä!");
}

// ======== –°—Ç–∞—Ä—Ç ==========
loadSentIds();
fetchAndSendApartments();

setInterval(fetchAndSendApartments, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –Ω–æ–≤—ã–µ
setInterval(processQueue, 15 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞
setInterval(clearSentIds, 48 * 60 * 60 * 1000); // —Ä–∞–∑ –≤ 2 –¥–Ω—è –æ—á–∏—Å—Ç–∫–∞
